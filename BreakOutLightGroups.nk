set cut_paste_input [stack 0]
version 13.2 v5
push $cut_paste_input
NoOp {
 name BREAKOUT_LGT_GROUPS
 tile_color 0xff
 note_font_size 12
 selected true
 xpos 32574
 ypos -306
 addUserKnob {20 User}
 addUserKnob {22 breakout l "<b><font color =\"white\">Breakout Light Groups" t "This will work for any additive layers" T "generatorNode = nuke.thisNode()\n\n\nimport re\n\ndef get_layers(readNode):\n    '''returns a list of all the layers '''\n    channels = readNode.channels()\n    layers = list( set(\[c.split('.')\[0] for c in channels]) )\n    layers.sort()\n    return layers\n\n# print get_layers(nuke.selectedNode() )\n\ndef get_lightgroup_minicomp_settings():\n    '''Customize lightgroup naming conventions used'''\n    settings=\{\}\n    flags=generatorNode\['layer_flags'].getValue()\n    flags= re.sub(' ', '', flags)\n    settings\['flags'] = flags.split(',')\n    settings\['pstamps'] = generatorNode\['pstamps'].getValue()\n    settings\['xSpace'] = generatorNode\['xspace'].getValue()\n    settings\['ySpace'] = generatorNode\['yspace'].getValue()\n    return settings\n\n\n\ndef get_lightgroups(node, flags ):\n    '''Returns a list of aovs which are lightgroups (based on naming convention flags set in LightGroupLabels list) ''' \n    \n    lightGroupLayers=\[]\n    for aov in get_layers(n):\n    \n        for flag in flags:\n            if flag in aov and aov not in lightGroupLayers:\n                lightGroupLayers.append(aov)\n    lightGroupLayers.sort()\n    return lightGroupLayers\n\ndef deselect_all_nodes():\n    for n in nuke.selectedNodes():\n        n\['selected'].setValue(False)\n\n#print get_lightgroups(nuke.selectedNode(),\['_ASS_', '_L_', 'lights', 'Lights'] )\n\ndef shuffle_out_lightgroups(node, settings = get_lightgroup_minicomp_settings() ):\n    '''This will create a mini comp from the layers flagged as lightgroups in the user defined settings. Flags, spacing and use of postage stamps can be set in the panel as per the lightgroup_minicomp_settings function() '''\n\n    xPos, yPos=int(node.xpos()), int(node.ypos())\n    xSpace, ySpace = int(settings\['xSpace']), int(settings\['ySpace'])\n    yPos+=ySpace\n    beautyDot=nuke.nodes.NoOp(label = 'beauty', inputs=\[node])\n    beautyDot.setXYpos(node.xpos(), yPos)\n    yPos+=ySpace\n    unpremult=nuke.nodes.Unpremult(channels='all', inputs=\[beautyDot])\n    unpremult.setXYpos(node.xpos(), yPos)\n    yPos+=ySpace\n\n\n    indexNo =0\n    bPipeNodes=\[unpremult] #all the merge nodes will be added to this list\n    topDots = \[unpremult]\n    for lg in get_lightgroups(node, settings\['flags']):\n        deselect_all_nodes()\n        selected=\[]\n        xPos +=xSpace\n        yPos +=ySpace\n\n        dot=nuke.nodes.Dot( inputs=\[ topDots \[indexNo] ] )\n        topDots.append(dot)\n        dot.setXpos (xPos)\n        dot.setYpos(unpremult.ypos())\n        shuffleNode = nuke.nodes.Shuffle2( label=lg, inputs=\[topDots\[indexNo+1]] )\n        shuffleNode\['in1'].setValue( lg )\n        shuffleNode\['postage_stamp'].setValue( settings\['pstamps'])\n        shuffleNode.setYpos(dot.ypos()+ 100)\n        tempDot=nuke.nodes.Dot( ) #defines corner of backdrop\n        tempDot.setXpos(xPos+int(xSpace/2))\n        tempDot.setYpos(shuffleNode.ypos()+ ySpace*3)\n        yPos +=ySpace\n        fromNode=nuke.nodes.Merge2 (operation ='from', tile_color='4278190335.0', label = '<i>'+lg, inputs=\[ bPipeNodes\[indexNo], bPipeNodes\[indexNo] ], Achannels=lg)\n        fromNode.setXYpos(node.xpos(), yPos )\n        bottomCorner = nuke.nodes.Dot( inputs=\[ shuffleNode ], tile_color='536805631.0', label = '<i>'+lg )\n        yPos +=int(ySpace/2)\n        bottomCorner.setXYpos(xPos, yPos )\n        merge = nuke.nodes.Merge2 (operation ='plus', label = '<i>'+lg, tile_color='536805631.0', inputs=\[ fromNode, bottomCorner ])\n        bPipeNodes.append( merge )\n        merge.setXYpos(node.xpos(), yPos)\n        for n in \[dot, shuffleNode, tempDot]:\n            n\['selected'].setValue(True)\n        bg = nukescripts.autoBackdrop()\n        bg\['label'].setValue(lg)\n        nuke.delete(tempDot)\n\n        indexNo +=1\n    yPos +=ySpace\n    alphaDot = nuke.nodes.Dot(inputs = \[beautyDot])\n    alphaDot2 = nuke.nodes.Dot(inputs = \[alphaDot])\n    alphaDot.setXYpos(unpremult.xpos()-int(xSpace/2), beautyDot.ypos() )\n    alphaDot2.setXYpos(alphaDot.xpos(), yPos )\n    copyAlpha = nuke.nodes.Copy(from0 = 'rgba.alpha', to0 = 'rgba.alpha', inputs = \[merge, alphaDot2] )\n    copyAlpha.setXYpos(node.xpos(), yPos )\n    yPos+=ySpace\n    removeNode=nuke.nodes.Remove(inputs = \[copyAlpha], operation='keep', channels='rgba', label ='<b>\[value operation] \[value channels]')\n    removeNode.setXYpos(node.xpos(), yPos)\n    yPos+=ySpace\n    premult = nuke.nodes.Premult(inputs = \[removeNode] )\n    premult.setXYpos(node.xpos(), yPos)\n\n\nshuffle_out_lightgroups(generatorNode)\n\n" +STARTLINE}
 addUserKnob {1 layer_flags l "Layer Flags <i>(Comma Seperated)"}
 layer_flags "_ASS_, _L_, Light, light, LGT"
 addUserKnob {3 xspace l "X Spacing" t "How far apart the nodes will be in x"}
 xspace 600
 addUserKnob {3 yspace l "Y Space" t "How far apart the nodes will be in Y" -STARTLINE}
 yspace 300
 addUserKnob {6 pstamps l "Show Shuffle Postage Stamps" +STARTLINE}
 addUserKnob {26 _1 l "" +STARTLINE T "<i>Break Out Light Groups 1.2\nDaniel Mark Miller 2022"}
}
